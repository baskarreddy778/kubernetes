Lab 5: Resource Quotas in Kubernetes

Task 1: Creating a Namespace
kubectl create namespace quotas
kubectl get ns
kubectl describe ns quotas

Task 2: Creating a resourcequota

vi rq-quotas.yaml

apiVersion: v1
kind: ResourceQuota
metadata:
  name: quota
  namespace: quotas
spec:
  hard:
    requests.cpu: "1"
    requests.memory: 1Gi
    limits.cpu: "2"
    limits.memory: 2Gi

kubectl create -f rq-quotas.yaml
kubectl describe ns resourcequota




Task 3: Verify resourcequota Functionality

vi rq-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: quota-pod
  namespace: quotas
spec:
  containers:
  - name: quota-ctr
    image: nginx
    resources:
      limits:
        memory: "800Mi"
        cpu: "1000m"
      requests:
        memory: "600Mi"
        cpu: "350m"
    ports:
      - containerPort: 80
	  
kubectl create -f rq-pod.yaml
kubectl describe ns resourcequota
kubectl get resourcequota -n quotas -o yaml


Task 4: Limiting Number of Pods

kubectl edit resourcequotas quota -n quotas
add following lines in spec: > hard:
count/deployments.apps: 2
count/replicasets.apps: 3

Task 5: Clean-up
1.	Delete the quota to clean up.
$ kubectl delete ns quotas



Task 6: Limit Range

vi limit.yaml
apiVersion: v1
kind: LimitRange
metadata:
  name: limit-range
  namespace: quotas
spec:
   limits:
   - default:
       cpu: "200m"
       memory: "512Mi"
     defaultRequest:
       cpu: "100m"
       memory: "128Mi"
     type: Container

kubectl create -f limit.yaml
kubectl describe ns quotas
kubectl get limitranges

Task: 6 Create pod without resource configuration and describe that pod
to see limit range is adding resource by it self 

vi res-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    app: myapp
  name: res-limit-pod
  namespace: quotas
spec:
  containers:
  - name: con1
    image: nginx:latest
    ports:
    - containerPort: 80
    resources:
      requests:
        memory: "64Mi"
        cpu: "200m"
      limits:
        memory: "128Mi"
        cpu: "500m"
  - name: con2
    image: tomcat
    ports:
    - containerPort: 8080

kubectl create -f res-pod.yaml
kubectl describe pod res-limit-pod -n quotas





Create linux user 

adduser aneesh

login to aneesh user 
su aneesh -

enable password authentication from ssh
vi /etc/ssh/sshd_config

PasswordAuthentication yes

restart sshd
systemctl restart sshd


•	Create a private key:
mkdir .certs
cd .certs
openssl genrsa -out aneesh.key 2048

•	Create a certificate signing request (CSR). CN is the username and O the group. We can set permissions by group, which can simplify management if we have, for example, multiple users with the same authorizations.
	# Without Group
openssl req -new -key aneesh.key -out aneesh.csr -subj "/CN=aneesh"


Sign the CSR with the Kubernetes CA. We have to use the CA cert and key which are normally in /etc/kubernetes/pki/. Our certificate will be valid for 500 days.
login to root user and execute following commands
cd /home/aneesh/.cert

openssl x509 -req -in aneesh.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out aneesh.crt -days 500

chown aneesh:aneesh aneesh.crt

go to aneesh user's terminal 
•	Create the user inside Kubernetes.
kubectl config set-credentials aneesh --client-certificate=/home/aneesh/.certs/aneesh.crt --client-key=/home/aneesh/.certs/aneesh.key

•	Create a context for the user.
kubectl config set-context aneesh-context --cluster=kubernetes --user=aneesh

set aneesh-context as default by editing .kube/config file

list context
kubectl config  get-contexts

Now go back to root terminal and copy cluster certificate from .kube/config file


.kube/config file for reference

apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01Ea3hNVEV3TWpReU1sb1hEVE13TURrd09URXdNalF5TWxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBT1RqCjh5SGxBM1BueU4rZEI2d2w4NHpFSXNuWWFrTjBZMmdtY0JVSG5ZeHY2RUNnRGZKc3Q3MmJOZ0xZcmxwQ01EUFkKTGR5OFFMNE43REpFUmNDUEpsQ01FTmR2UmRYc2dJejFNMXF6cEhIbHdsZG4xYlhFamJnL3hRMTlhaW1RZkcyeApoRW5kRWNUQTVFWjByeEhTL01MSk1lRm5qd2pYWkF5RmlRVlIzcnBoY3lmc2poUWtwbjI2aUV4bVVwM28rSGliCjZJa1Z5VEM3YlBQVG5XZWpzeUREOEVUM0lOd3Z6dVFPT0hGVEJSM0sxWThWRlU3dnBTQlRIRlBmN0xnd1JjODMKNkVDWHRmMytiamR2aEtRQStWMm9IUzZ5NTlDcVdhZXFLUVhQSFZKNm9jcEFjVnBxT0Y3cmhnRi9VSGpZZGVUTgpNRVZGbjFMQThRcm5HeFdwVlpjQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZKRitaOElNdVVzRFcxaVNXQlFrTktaTkt5anZNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFCVGgzd3hMMGdoWk9Ga1djRUhmUkdVQWtza2tpSG1wMlZ5UnBNWGxqTnZqSXpjNldjMAo2WnRIbCt2bXFZL01xVUpSUG5IN0hjTjBQNzcyb1RLTlRMbkF1OUlOd1NFcmhWY0Y3SHc3RXVkL3NhcjdCWVlFCkVUU1J4dVFGTTg1dWRTRU1iMXFJVVR0WHY5RGpGSFV3dGdlczEzWHh3NGR4cXVBWlFzRWV4ODF5Yzh3NUNSRDcKSXQ1UjZtSWR0enhQVG9kNGEveXk5bUZzRjAvamVjaVkwcTVmOVVBR0lWSE0xa3dwdkwzN0txcEV5cklVUTBEbApEZGEwTklNNW1iN3hLZi92V0VkUjNIN0NxT2hYM1ZhcmRNK0haSHRRTkVDVm9HYmlteVhjaGFqUU9mT0lIcm5aCjQvZDZSVEp4dWxnR0diSjg2WjhySjI1QzBzKyt5K1BPOVZ0WgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://192.168.1.210:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    namespace: myk8s
    user: aneesh
  name: aneesh-context
current-context: aneesh-context
kind: Config
preferences: {}
users:
- name: aneesh
  user:
    client-certificate: /home/aneesh/.certs/aneesh.crt
    client-key: /home/aneesh/.certs/aneesh.key


create Role and ROle binding 

vi role-rolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: devops-role
  namespace: devops
rules:
  - apiGroups: [ "*" ]
    resources: [ "pods/exec","pods","deployments" ]
    verbs: [ "get", "list","edit","create","update","delete"  ]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: devops-rolebinding
  namespace: devops
subjects:
- kind: User
  name: aneesh
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: devops-role
  apiGroup: rbac.authorization.k8s.io


kubectl create -f role-rolebinding.yaml

kubectl get role -n devops
kubectl get rolebinding -n devops

now login to aneesh user and execute folloing commands 

kubectl get pods
kubectl get deployments

kubectl get configmap

now see error permission denied because no verbs configured for configmap in role 
