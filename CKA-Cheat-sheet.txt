CKA - 

Lab 1: Kubeadm cluster creation 
Task 1: Setting up a Kubernetes Cluster
sudo hostnamectl set-hostname kops

Task 2: 
Task: Create pod using kubectl command

kubectl run mypod --image=nginx:latest
#list pods
kubectl get pods

#ssh/login to that pod

kubectl exec -it mypod -- bash 
#to comeout of pod run exit command.
exit
# to Read pod's log
kubectl logs mypod
#Describe pod to see it's configuration
kubectl describe pod mypod

Task 3:
# multiple container in pods 

vi multi-container.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    app: myapp
  name: multi-con-pod
spec:
  containers:
  - name: con1   ### first container 
    image: nginx:latest
    ports:
    - containerPort: 80
  - name: con2    ## second container 
    image: tomcat
    ports:
    - containerPort: 8080

# to save file :wq

create pod by using below command 
kubectl create -f multi-container.yaml

a. read logs of specific contaienr
 kubectl logs {pod-name} -c {container-name}
 kubectl logs multi-con-pod -c con2

b. login into specific container
kubectl exec -it {pod-name} -c {container-name} -- bash
kubectl exec -it multi-con-pod -c con1 -- bash

to out of container run exit command 


Lab 2: Services in Kubernetes

Task 1: Create a Pod using a YAML file

kubectl get nodes
kubectl get nodes -o wide

vi httpd-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: httpd-pod
  labels:
    app: myapp
spec:
  containers:
  - name: httpd-container
    image: httpd
    ports:
      - containerPort: 80

# to save file use :wq!


kubectl create -f httpd-pod.yaml
kubectl get pods
kubectl get pods -o wide
kubectl get pod httpd-pod -o yaml
kubectl describe pod httpd-pod 
kubectl get pods --show-labels

Task 2: Setup ClusterIP service

vi httpd-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: httpd-svc
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP

# to save :wq

kubectl apply -f httpd-svc.yaml
kubectl get services
kubectl describe svc httpd-svc
kubectl get ep 
kubectl get svc httpd-svc

Create a pod and login to that pod to execute curl command 

kubectl run testpod --image=httpd:latest --port 80
kubectl exec -it testpod -- bash
apt update && apt install curl -y
curl http://httpd-svc

kubectl get nodes -owide | awk '{print $7}'


Task 3: Setup NodePort service

vi httpd-svc.yaml

# Replace the content of httpd-svc.yaml with below content use ESc and :wq! to quit vi

apiVersion: v1
kind: Service
metadata:
  name: httpd-svc
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
  type: NodePort

# End of file

kubectl apply -f httpd-svc.yaml

kubectl get svc 
kubectl describe svc httpd-svc
kubectl get nodes -owide | grep node | awk '{print $7}'
curl http://<Your NODE_EXTERNAL_IP>:<Your NodePort>


Task 4: Setup LoadBalancer service

vi httpd-svc.yaml

# Replace the content of httpd-svc.yaml with below content use ESc and :wq! to quit vi

apiVersion: v1
kind: Service
metadata:
  name: httpd-svc
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
  type: LoadBalancer


# End of file

kubectl apply -f httpd-svc.yaml
kubectl describe svc httpd-svc


Task: 6 Resource allocation 

vi resource-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    app: myapp
  name: res-limit-pod
spec:
  containers:
  - name: con1
    image: nginx:latest
    ports:
    - containerPort: 80
    resources:
      requests:
        memory: "64Mi"
        cpu: "200m"
      limits:
        memory: "128Mi"
        cpu: "500m"
  - name: con2
    image: tomcat
    ports:
    - containerPort: 8080

#to save file :wq
kubectl create -f resource-pod.yaml
kubectl get pod

kubectl describe pod res-limit-pod


******************
Lab 3: Deployment*
******************
Task 1: Write a Deployment YAML and Apply it

wget https://hpe-content.s3.ap-south-1.amazonaws.com/dep-nginx.yaml
kubectl apply -f dep-nginx.yaml
kubectl get deployments
kubectl get rs
kubectl get pods

#expose deployment to access it from outside of the cluster
kubectl expose deployment nginx-dep --type NodePort
kubectl get svc 
# enable port from decurity group


kubectl exec -it <replace pod_name> -- /bin/bash
nginx -v
exit

Task 2: Update the Deployment with a newer image

kubectl set image deployment/nginx-dep nginx-ctr=nginx:1.11 --record
kubectl describe deployments
kubectl get pods

kubectl exec -it <replace pod_name> -- /bin/bash
nginx -v
exit

Task 3: Rollback of Deployment 

check deployment history
kubectl rollout history deployment/nginx-dep

describe revision
kubectl rollout history deployment nginx-dep --revision 2

roll back to specific revision 
kubectl rollout undo deployment/nginx-dep --to-revision=1
kubectl get pods

kubectl exec -it <replace pod_name> -- /bin/bash
nginx -v
exit

##  update history using annotation 
kubectl annotate deployments.apps nginx-dep kubernetes.io/change-cause="rolled back to revision 1"
kubectl rollout history deployment/nginx-dep


Task 4: Scaling of Deployments

kubectl get deployments
kubectl get pods

kubectl scale deployment nginx-dep --replicas=8
kubectl get deployments
kubectl get pods

kubectl scale deployment nginx-dep --replicas=2
kubectl get deployments
kubectl get pods

kubectl delete -f dep-nginx.yaml

Task 5: Deployment Auto Scaling HPA - Horizontal Pod Autoscaling

kubectl autoscale deployment nginx-dep --min=3 --max=8 --cpu-percent=70
kubectl get hpa

Lab 4: DaemonSet in Kubernetes

wget https://hpe-content.s3.ap-south-1.amazonaws.com/ds-pod.yaml

kubectl apply -f ds-pod.yaml
kubectl get ds fluent-ds
kubectl get pods -o wide
kubectl delete -f ds-pod.yaml




















**** Helm Chart ****

Installing Helm 3 in Ubuntu Linux and installing wordpress (LAMP) application through Helm.

wget files.cloudthat.training/devops/kubernetes-essentials/helm.sh
cat helm.sh
bash helm.sh
helm version
helm repo add bitnami https://charts.bitnami.com/bitnami
helm repo update
helm repo list
helm search repo wordpress
helm install wordpress-chart bitnami/wordpress
Helm ls
helm uninstall wordpress-chart


