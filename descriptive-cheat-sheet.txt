Lab 1: Creating an EC2 Instance in AWS and Installing Docker 

Task 1: Installing Docker on Ubuntu 18.04
Log in to your AWS account and navigate to the EC2 service.
Launch a new EC2 instance with Ubuntu 18.04 as the operating system.
Connect to the instance via SSH.
Set the hostname for the instance to "docker" by running the following command:
sudo hostnamectl set-hostname docker
Switch to the root user by running the following command:
sudo su
Update the package list by running the following command:
apt update -y
Install curl, which is a dependency required for the Docker installation, by running the following command:
apt install curl -y
Download and install Docker by running the following command:
curl -SSL https://get.docker.com/ | sh
Verify that Docker is running by checking the status of the Docker service:
service docker status
Add the current user (in this case, "ubuntu") to the Docker group so that the user can run Docker commands without sudo:
usermod -aG docker ubuntu
Verify that Docker is installed and working by running the following command:
docker --version
Congratulations, you have now installed Docker on an Ubuntu 18.04 instance in AWS!


Lab 2: Basic Docker Commands

Task 1: Creating your first Docker container
Open your terminal and run the following command to create your first Docker container: 
docker run hello-world
This will pull the "hello-world" image from Docker Hub and run a container from it. The container will print a message and then exit.

Task 2: Basic Commands to run the Container in Interactive mode
Pull the "ubuntu" image from Docker Hub by running the following command:
docker pull ubuntu
List all Docker images that are available on the system by running the following command:
docker image ls
Create a new container from the "ubuntu" image and run it in interactive mode by running the following command:
docker run -it --name ct1 ubuntu
Once inside the container, create three new files by running the following command: 
touch f1 f2 f3
List the contents of the current directory by running the following command: 
ls
Exit the container by running the "exit" command.
Check the status of all running and stopped containers by running the following command:
docker ps -a
Create a new container named "ct2" from the "ubuntu" image and run it in interactive mode by running the following command:
docker run -it --name ct2 ubuntu
Press the "Ctrl+P+Q" key combination to detach from the container and return to the Docker host.
List all running containers by running the following command:
docker ps
Re-attach to the "ct2" container by running the following command: 
docker attach ct2
Exit the container by running the "exit" command.
Check the status of all running and stopped containers by running the following command: 
docker ps -a
Task 3: Port Mapping from Docker Host to container
Create a new container from the "httpd" image and map port 80 on the Docker host to port 80 in the container by running the following command:
docker run -d -p 80:80 httpd
List all running containers by running the following command:
docker ps
Enter the container by running the following command:
docker exec -it <replace container id/name> /bin/bash
Exit the container by running the "exit" command.
List all running containers by running the following command:
docker ps
Kill the "httpd" process inside the container by running the following command:
kill 1
List all containers (including stopped ones) by running the following command:
docker ps -a
Stop and remove the container by running the following commands:
docker container stop <replace container id/name>
docker container rm <replace container id/name>
List all images that are available on the system by running the following command:
docker image ls
Remove the "httpd" image by running the following command:
docker image rm <replace image id>
Congratulations, you have now learned basic Docker commands and created, managed, and deleted Docker containers!

 
Lab3: Docker Lifecycle and Volume Mounting

Lab Overview: In this lab, you will learn about the Docker lifecycle and how to work with volume mounting in Docker.

Task 1: Docker Lifecycle
Step 1: Pull the httpd Docker image.
docker pull httpd
Step 2: List the Docker images available.
docker image ls
Step 3: View the history of the httpd image.
docker image history httpd
Step 4: Create a container from the httpd image.
docker container create httpd
Step 5: List all the containers (including stopped ones).
docker container ls -a
Step 6: Start the container using the container id or name.
docker container start <container id/name>
Step 7: List all the running containers.
docker container ls
Step 8: Stop the container using the container id or name.
docker container stop <container id/name>
Step 9: List all the containers (including stopped ones).
docker container ls -a
Step 10: Start the container again.
docker container start <container id/name>
Step 11: Pause the container using the container id or name.
docker container pause <container id/name>
Step 12: List all the containers (including paused ones).
docker container ls -a
Step 13: Unpause the container using the container id or name.
docker container unpause <container id/name>
Step 14: List all the containers (including running and paused ones).
docker container ls -a
Step 15: Access the container shell.
docker exec -it <container id/name> bash
Step 16: Change directory to htdocs.
cd htdocs
Step 17: Update the package list and install wget.
apt update
apt install wget -y
Step 18: Remove the existing index.html file.
rm index.html
Step 19: Download a new index.html file.
wget files.cloudthat.training/devops/docker-essentials/index.html
Step 20: Exit the container shell.
exit
Step 21: Create a new image from the modified container.
docker commit <container id/name> myhttpd:version1
Step 22: List all the Docker images available.
docker image ls
Step 23: Run a new container from the modified image, mapping port 8080 to port 80 of the container.
docker run -d -p 8080:80 myhttpd:version1
Step 24: Access the newly created container using a web browser or curl command.
curl <public IP>:8080
Step 25: List all the running containers.
docker container ls
Step 26: View the logs of the container using the container id or name.
docker logs <container id/name>
Step 27: View the resource usage statistics of the container using the container id or name.
docker stats <container id/name>
Step 28: Stop the container using the container id or name.
docker stop <container id/name>
Step 29: Remove the container using the container id or name.
docker container rm <container id/name>
Step 30:To list all the Docker images that are currently stored on your local machine
docker image ls
step 31:To list all the containers, including those that are not running, on the local machine.
docker image ls -a

Lab 4: Working with volume mounts in Docker
Task 1: Starting Docker Containers with Bind Mounts
In this task, you will create a shared directory on the Docker host and mount it as a volume in two different Docker containers. You will then modify the contents of the shared directory in each container and verify that the changes are visible on the Docker host.
Create a shared directory on the Docker host:
mkdir /home/ubuntu/share
Create a file named index.html in the shared directory with the following contents:
Hello From Docker Host
You can use the following command to create the file:
echo 'Hello From Docker Host' > /home/ubuntu/share/index.html
Start a new Docker container and mount the shared directory as a volume. Use the ubuntu:18.04 image and start an interactive terminal session in the container:
docker run -it --name container1 -p 80:80 -v /home/ubuntu/share:/var/www/html ubuntu:18.04 /bin/bash
Update the package index and install the Apache web server in the container:
apt-get update -y && apt-get install apache2 -y
Start the Apache web server:
service apache2 start
Verify that the Apache web server is running:
service apache2 status
Modify the index.html file in the shared directory to display a message from the container. Use the following command to modify the file:
echo 'Hello From Container1' > /var/www/html/index.html
Exit the container and switch back to the Docker host by pressing Ctrl+P+Q.
Start a new Docker container and mount the shared directory as a volume. Use the ubuntu:18.04 image and start an interactive terminal session in the container:
docker run -it --name container2 -v /home/ubuntu/share:/var/www/html ubuntu:18.04
Modify the index.html file in the shared directory to display a message from the second container. Use the following command to modify the file:
echo 'Hello From Container2' > /var/www/html/index.html
Exit the container.
List all Docker containers, including stopped containers:
docker ps -a
Remove the two containers:
docker rm -vf container1 container2 
Task 2: Create a Bind Mount with the --mount Option and Verify It
In this task, you will create a new Docker container and mount a shared directory using the --mount option. You will then inspect the container to verify that the shared directory is mounted correctly.
Start a new Docker container and mount the shared directory using the --mount option. Use the nginx:latest image and run the container in detached mode:
docker run -d -it --name newbind01 --mount type=bind,source=/home/ubuntu/share/,target=/app nginx:latest
Inspect the container to verify that the shared directory is mounted correctly:
docker inspect newbind01
Verify that the shared directory is mounted by listing the mounted filesystems in the container:
mount | grep -i /app


Lab 5: Volume Mounting with Docker Containers

Task 1: Creating a new docker volume and inspecting containers
Open a terminal or command prompt and run the following command to create a new Docker volume:
docker volume create ct-volume1
To verify that the volume has been created, run the following command:
docker volume ls
To inspect the newly created volume, run the following command:
docker volume inspect ct-volume1
This command will display detailed information about the volume, including its name, driver, mountpoint, and other attributes.

Task 2: Launching a Nginx container mapped to a specific docker volume and verification
To launch an Nginx container mapped to the ct-volume1 volume, run the following command:
docker run -d -p 80:80 --name=nginx-container --mount src=ct-volume1,dst=/usr/share/nginx/html nginx
To verify that the container is running and using the correct volume, run the following command:
docker ps
This command will display a list of running containers, including the nginx-container.
3. To inspect the nginx-container, run the following command:
docker container inspect nginx-container
This command will display detailed information about the container, including its ID, IP address, port mappings, environment variables, and mounted volumes.
4. To verify that the volume is mounted correctly, run the following commands:
ls /var/lib/docker/volumes/ct-volume1/_data/
cd /var/lib/docker/volumes/ct-volume1/_data/
touch f1 f2 f3
vi /var/lib/docker/volumes/ct-volume1/_data/index.html
These commands will create three new files (f1, f2, and f3) in the volume's mountpoint directory (/var/lib/docker/volumes/ct-volume1/_data/) and modify the index.html file.

Task 3: Deleting container and attaching the volume to another container
To stop and remove the nginx-container, run the following commands:
docker container stop nginx-container
docker rm container nginx-container
docker ps -a
To launch a new container and attach the ct-volume1 volume, run the following command:
docker run -it --name busybox-container1 --mount source=ct-volume1,target=/data busybox sh
To verify that the volume is mounted correctly, run the following commands:
ls
cd /data
ls
exit
These commands will display the contents of the volume's mountpoint directory (/data).
4. To stop and remove the busybox-container1, run the following commands:
docker stop busybox-container1
docker rm busybox-container1
docker ps -a
To remove the ct-volume1 volume, run the following commands:
docker volume ls
docker volume rm ct-volume1
docker volume ls
Task 4: Create a container with tmpfs mount and verify it
docker run -d -it --name tmpmount --mount type=tmpfs,destination=/app nginx:latest
docker container inspect tmpmount

Lab 6: Docker Networking 
Task 1: Create a new docker bridge and check connectivity between containers of same bridge
Check the list of available networks:
docker network ls
Create a new bridge network named ct-bridge1:
docker network create --driver bridge ct-bridge1
Inspect the newly created network to check its properties:
docker network inspect ct-bridge1
Launch two containers, ct-c1 and ct-c2, and attach them to ct-bridge1 network:
docker run -it --network ct-bridge1 --name=ct-c1 busybox
docker run -it --network ct-bridge1 --name=ct-c2 busybox
Inside ct-c2 container, check the IP address and connectivity with ct-c1 container:
docker attach ct-c2
ip addr
ping -c 5 ct-c1
Task 2: Create a new docker bridge and check connectivity between containers of different bridges
Create another bridge network named ct-bridge2:
docker network create --driver bridge ct-bridge2
Launch two more containers, ct-c3 and ct-c4, and attach them to ct-bridge2 network:
docker run -it --network ct-bridge2 --name=ct-c3 busybox
docker run -it --network ct-bridge2 --name=ct-c4 busybox
Inside ct-c4 container, check the connectivity with ct-c3 container:
docker attach ct-c4
ping -c 5 ct-c3
Inside ct-c4 container, check the connectivity with ct-c1 and ct-c2 containers which are on a different network
ping -c 5 ct-c1
ping -c 5 ct-c2
Task 3: Using 'Docker network connect' command create a successful connection between containers of different bridges
Connect ct-c1 container to ct-bridge2 network using 'Docker network connect' command:
docker network connect ct-bridge2 ct-c1
Verify the connection by checking the IP address and connectivity between ct-c1 and ct-c4 containers:
docker attach ct-c1
ping -c 5 ct-c4
ip addr
ip route
Task 4: Launch a container to host network
Launch a container ct-c5 with the host network configuration:
docker run -it --network host --name=ct-c5 busybox
Inside ct-c5 container, check the IP address and network configuration:
ip addr
ifconfig
Task 5: Launch a container to none network
Launch a container ct-c6 with none network configuration:
ip addr
Press Ctrl+P+Q, to switch back to Host

Lab 7: Building a Dockerfile to setup an Ubuntu container with WordPress application
Task 1: Deploying MySQL and WordPress containers
First, create a directory named "wordpress" and navigate to it using the following commands:
mkdir wordpress
cd wordpress
Next, create a Dockerfile for building the Ubuntu container with WordPress installed. Use the following command to create and edit a new file named Dockerfile:
vi Dockerfile
Paste the following contents into the file:
FROM ubuntu:20.04
MAINTAINER ADMIN "admin@cloudthat.com"
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
apt-get -q -y install apache2 \
php7.4 \
php7.4-fpm \
php7.4-mysql \
libapache2-mod-php7.4
ADD http://wordpress.org/latest.tar.gz /tmp
RUN tar xzvf /tmp/latest.tar.gz -C /tmp  \
&& cp -R /tmp/wordpress/* /var/www/html
RUN rm /var/www/html/index.html && \
chown -R www-data:www-data /var/www/html
EXPOSE 80
CMD ["/usr/sbin/apache2ctl","-D","FOREGROUND"]
This Dockerfile will create an Ubuntu 20.04 container with Apache, PHP, and WordPress installed.
Build the Docker image using the following command:
docker build -t ct-wordpress:v1 .
Now, create a Docker network named "ct-bridge" for the MySQL and WordPress containers to communicate with each other:
docker network create --driver bridge ct-bridge
Run a MySQL container on the newly created network with the following command:
docker run -d --network ct-bridge --name mysql -e MYSQL_DATABASE=wordpress -e MYSQL_USER=admin -e MYSQL_PASSWORD=password -e MYSQL_ROOT_PASSWORD=password mysql:5.7
This will run a MySQL 5.7 container with the necessary environment variables set for creating a WordPress database and user.
Next, run the WordPress container on the same network and map its port 80 to the host's port 80 using the following command:
docker run -d --network ct-bridge -p 80:80 ct-wordpress:v1
docker ps

Lab 8: Deploying MySQL and WordPress Containers with Docker Compose

In this lab, we will deploy MySQL and WordPress containers using Docker Compose.
Task 1: Create a Docker Compose file
Create a new directory named "wordpress_compose" using the following command:
mkdir wordpress_compose
Change to the newly created directory:
cd wordpress_compose
Create a new file named "docker-compose.yml" and open it in a text editor:
vi docker-compose.yml
Paste the following contents into the file:
version: '3.8'
services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - "80:80"
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: admin
      WORDPRESS_DB_PASSWORD: password
volumes:
    db_data:
The above Docker Compose file defines two services: a MySQL database and a WordPress application. The MySQL service uses the official MySQL 5.7 image and creates a named volume for the database data. The WordPress service uses the official WordPress image and depends on the MySQL service. It also maps port 80 to the host system and sets environment variables for the database configuration.
Save and exit the file.

Task 2: Deploy the containers
In the "wordpress_compose" directory, run the following command to start the containers:
docker-compose up -d
This will download the necessary images and start the containers in detached mode.
Verify that the containers are running using the following command:
docker-compose ps
This will show you the status of the containers defined in the Docker Compose file.
Open a web browser and navigate to http://localhost. You should see the WordPress installation page.
Follow the WordPress installation wizard to set up your site.
Task 3: Stop and remove the containers
To stop the containers, run the following command in the "wordpress_compose" directory:
docker-compose down
This will stop and remove the containers, but will not remove the database volume.
To remove the database volume as well, run the following command in the "wordpress_compose" directory:
docker-compose down -v
This will stop and remove the containers and the database volume.
To list the containers which are currently running
docker image ls
To list all the Docker images that are currently stored on your local machine
docker image ls
step 31:To list all the containers, including those that are not running, on the local machine.
docker image ls -a

Congratulations! You have successfully deployed MySQL and WordPress containers using Docker Compose.


2 / 2

Lab 9: Building Efficient Docker Images

In this lab, we will learn how to build efficient Docker images using Golang as an example.
Task 1: Create a Golang Docker Image to print Hello World
Create a directory called large and navigate to it.
mkdir large && cd large
Create a file called helloworld.go and paste the following code:
package main
import "fmt"
func main() {
fmt.Println("hello world")
}
This code will print "hello world" when executed.
Create a Dockerfile in the same directory by running the following command:
vi Dockerfile
Paste the following content into the Dockerfile:
FROM golang:1.12.5
WORKDIR /app
COPY helloworld.go .
RUN GOOS=linux go build -a -installsuffix cgo -o helloworld .
CMD ["./helloworld"]
This Dockerfile will build a Golang image and copy the helloworld.go file into the container. It will then compile the code and create an executable called helloworld and finally run it.
Build the Docker image by running the following command:
docker build -t hello-go:v1 .
Run the Docker image by running the following command:
docker run hello-go:v1
You should see "hello world" printed to the console.

Task 2: Create an Optimal Docker Image using Multi-stage Dockerfile

Navigate to the parent directory of large by running the following command:
cd ..
Create a directory called optimal and navigate to it.
mkdir optimal && cd optimal
Create a Dockerfile in the same directory by running the following command:
vi Dockerfile
Paste the following content into the Dockerfile:
FROM golang:1.12.5 AS stage1
WORKDIR /app
COPY helloworld.go .
RUN GOOS=linux go build -a -installsuffix cgo -o helloworld .
FROM alpine:3.9.3
WORKDIR /root
COPY --from=stage1 /app/helloworld .
CMD ["./helloworld"]
This Dockerfile uses multi-stage build technique, which will compile the Golang code in the first stage and copy the binary to a lightweight Alpine Linux image in the second stage.
Copy the helloworld.go file from the large directory to the current directory by running the following command:
cp ../large/helloworld.go .
Build the Docker image by running the following command:
docker build -t hello-go:v2 .
Run the Docker image by running the following command:
docker run hello-go:v2
You should see "hello world" printed to the console.
Check the size of both images by running the following command:
docker image ls
The second image should be significantly smaller than the first image.
Check the history of both images by running the following command:
docker history hello-go:v1
docker history hello-go:v2

Lab 10: Docker Compose

In this lab, we will learn how to use Docker Compose to manage multi-container Docker applications. We will create a Docker Compose file to run WordPress and MySQL containers.
Task 1: Install Docker Compose
Before we begin, we need to install Docker Compose on our system. Follow the below steps to install Docker Compose:
Download the latest version of Docker Compose from the official website:
$ wget https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
Make sure to replace the version number with the latest available version.
Make the downloaded binary file executable:
$ chmod +x docker-compose-Linux-x86_64
Move the binary file to the /usr/local/bin directory:
$ sudo mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
Verify the installation by running the following command:
$ docker-compose --version
It should output the version of Docker Compose installed on your system.
Task 2: Create a Docker Compose file for WordPress application
In this task, we will create a Docker Compose file to run WordPress and MySQL containers. Follow the below steps to create the file:
Create a new directory for our WordPress application and navigate to it:
$ mkdir wordpress && cd wordpress
Create a new file named docker-compose.yaml using your favorite text editor:
$ vi docker-compose.yaml
Copy and paste the following content into the file:
version: '3.3'

services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: somewordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress

  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - "80:80"
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
volumes:
  db_data: {}
This file defines two services: db and wordpress. The db service uses the mysql:5.7 image and sets the necessary environment variables for the MySQL database. It also creates a named volume db_data to persist the database data. The wordpress service uses the wordpress:latest image and depends on the db service. It also exposes port 80 to the host system and sets the necessary environment variables for the WordPress application
Save and close the file.
Start the containers using the following command:
$ docker-compose up -d
This will download the required images, create the necessary containers, and start them in detached mode.
Verify that the containers are running using the following command:
$ docker-compose ps
This will show the status of the containers defined in the Docker Compose file.
Verify that the containers are running by checking the list of running containers:
$ docker container ls
Verify that the network and volume have been created:
$ docker network ls
$ docker volume ls
Stop and remove the containers
